// Generated by Tekla.Technology.Akit.ScriptBuilder

using Tekla.Structures.Model;
using Tekla.Structures;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;
using Tekla.Structures.Geometry3d;
using Tekla.Structures.Solid;
using Tekla.Structures.Model.UI;
using TSMUI = Tekla.Structures.Model.UI;
using T3D = Tekla.Structures.Geometry3d;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System;

namespace Tekla.Technology.Akit.UserScript
{
    public class Script
    {

        static Model MyModel = new Model();

        public static void Run(Tekla.Technology.Akit.IScript akit)
        {

            MyModel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane());
            Tekla.Structures.Model.UI.ModelObjectSelector MS = new Tekla.Structures.Model.UI.ModelObjectSelector();
            ModelObjectEnumerator Menum = MS.GetSelectedObjects();
            List<Beam> AllPartList = EnumtoArray(Menum).OfType<Beam>().ToList();
            List<int> AllPartListIds = AllPartList.Select(x => x.Identifier.ID).ToList();
            List<Beam> BeamList = AllPartList.Where(x => x.Name == "BEAM").ToList();

            int ConCount = 0;
            foreach (Beam bem in BeamList)
            {
                bem.Select();
                // Start Side
                Beam StartBeam = GetPrimary(bem, AllPartListIds, "Start");
                if (StartBeam != null && !IsConnectionApplied(bem, StartBeam))
                {
                    //MessageBox.Show(StartBeam.Identifier.ID.ToString());
                    ApplyConn(StartBeam, bem, "Start");
                    ConCount++;
                }

                Beam EndBeam = GetPrimary(bem, AllPartListIds, "End");
                if (EndBeam != null && !IsConnectionApplied(bem, EndBeam))
                {
                    ApplyConn(EndBeam, bem, "End");
                    ConCount++;
                }
            }

            MessageBox.Show("Total Connection Applied : " + ConCount.ToString());

        }


        private static void ApplyConn(Beam PrimB, Beam SecBeam, string Side)
        {
            Connection C = new Connection();
            C.Name = "Clip Angle";

            if (PrimB.Name == "COLUMN")
            {
                string ColumnPas = GetColumnPos(PrimB, SecBeam, Side);
                if (ColumnPas == "Flange")
                    C.Number = 131;
                else
                    C.Number = 146;

            }
            else
                C.Number = 146;

            C.LoadAttributesFromFile("Default_ShearPlate");
            C.UpVector = new Vector(0, 0, 1000);
            C.PositionType = PositionTypeEnum.COLLISION_PLANE;

            C.SetPrimaryObject(PrimB);
            C.SetSecondaryObject(SecBeam);

            C.Insert();
            MyModel.CommitChanges();
        }

        private static bool IsConnectionApplied(Beam Secbem, Beam PrimB)
        {
            Secbem.Select();
            PrimB.Select();
            bool RetCheck = false;
            List<Connection> ConnList = EnumtoArray(PrimB.GetComponents()).OfType<Connection>().ToList();

            foreach (Connection con in ConnList)
            {
                List<Beam> ConnParts = GetConnParts(con);
                List<int> Ids = ConnParts.Select(x => x.Identifier.ID).ToList();
                if (Ids.Contains(Secbem.Identifier.ID))
                {
                    RetCheck = true;
                    break;
                }

            }

            return RetCheck;
        }


        private static string GetColumnPos(Beam PrimB, Beam Secbem, string Side)
        {
            string RetPos = "Flange";
            Secbem.Select();
            PrimB.Select();

            if (Side == "Start")
                SetPlane(Secbem.StartPoint, Secbem.EndPoint);
            else
                SetPlane(Secbem.EndPoint, Secbem.StartPoint);

            Secbem.Select();
            PrimB.Select();
            double BeamHeight = 0;
            PrimB.GetReportProperty("PROFILE.HEIGHT", ref BeamHeight);
            double YDiff = PrimB.GetSolid().MaximumPoint.Y - PrimB.GetSolid().MinimumPoint.Y;
            if (Math.Round(YDiff) == Math.Round(BeamHeight))
                RetPos = "Web";

            MyModel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane());
            Secbem.Select();
            PrimB.Select();

            return RetPos;

        }

        private static void SetPlane(Point StartPoint, Point EndPoint)
        {
            MyModel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane());

            double Xdif = EndPoint.X - StartPoint.X;
            double Ydif = EndPoint.Y - StartPoint.Y;
            double Zdif = EndPoint.Z - StartPoint.Z;
            MyModel.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane(StartPoint, new T3D.Vector(Xdif, Ydif, 0), new T3D.Vector(Xdif, Ydif, 0).Cross(new T3D.Vector(0, 0, -1))));

        }

        private static List<Beam> GetConnParts(Connection con)
        {
            List<Beam> RetList = new List<Beam>();
            RetList.Add(con.GetPrimaryObject() as Beam);
            RetList.AddRange(con.GetSecondaryObjects().OfType<Beam>().ToList());

            return RetList;
        }



        private static Beam GetPrimary(Beam SecBeam, List<int> AllPartListIds, string Side)
        {
            Beam PrimB = null;
            double Tol = 100;
            Point CheckP = SecBeam.StartPoint;
            if (Side == "End")
                CheckP = SecBeam.EndPoint;

            Point MinP = new Point(SecBeam.GetSolid().MinimumPoint.X - Tol, SecBeam.GetSolid().MinimumPoint.Y - Tol, SecBeam.GetSolid().MinimumPoint.Z - Tol);
            Point MaxP = new Point(SecBeam.GetSolid().MaximumPoint.X + Tol, SecBeam.GetSolid().MaximumPoint.Y + Tol, SecBeam.GetSolid().MaximumPoint.Z + Tol);
            ModelObjectEnumerator Enum = MyModel.GetModelObjectSelector().GetObjectsByBoundingBox(MinP, MaxP);
            List<Beam> AllPartList = EnumtoArray(Enum).OfType<Beam>().ToList().Where(x => x.Identifier.ID != SecBeam.Identifier.ID && AllPartListIds.Contains(x.Identifier.ID)).ToList();
            AllPartList = (from b in AllPartList orderby b.Name descending select b).ToList();
            Line SecLine = new Line(SecBeam.StartPoint, SecBeam.EndPoint);
            foreach (Beam bem in AllPartList)
            {
                bem.Select();
                Line PrimLine = new Line(bem.StartPoint, bem.EndPoint);
                double distB = T3D.Distance.PointToLine(CheckP, PrimLine);
                if (!Parallel.LineToLine(SecLine, PrimLine) && distB <= 200)
                {
                    double ColZ = bem.StartPoint.Z + 50;
                    if (bem.Name == "COLUMN" && ColZ < SecBeam.StartPoint.Z)
                    {
                        PrimB = bem;
                        break;
                    }
                    else
                    {
                        PrimB = bem;
                        break;
                    }
                }
            }

            return PrimB;

        }

        private static ArrayList EnumtoArray(IEnumerator Enum)
        {
            ArrayList RetList = new ArrayList();
            while (Enum.MoveNext())
            {
                ModelObject B = Enum.Current as ModelObject;
                if (B != null)
                {
                    RetList.Add(B);
                }
            }

            return RetList;

        }

    }
}